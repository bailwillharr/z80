; term.z80

; word_to_hex
; inputs: hl - word, de - 5 byte destination buffer
word_to_hex
#local
	; first hex digit
	ld a, h
	srl a
	srl a
	srl a
	srl a
	and %00001111
	call halfbyte_to_hex
	ld (de), a
	inc de

	; second hex digit
	ld a, h
	and %00001111
	call halfbyte_to_hex
	ld (de), a
	inc de

	; third hex digit
	ld a, l
	srl a
	srl a
	srl a
	srl a
	and %00001111
	call halfbyte_to_hex
	ld (de), a
	inc de

	; fourth hex digit
	ld a, l
	and %00001111
	call halfbyte_to_hex
	ld (de), a
	inc de

	; terminating zero
	ld a, 0
	ld (de), a

	ret
#endlocal

; halfbyte_to_hex
; inputs: a - half byte (upper 4 bits must be empty)
; outputs: a - ASCII character
halfbyte_to_hex
#local
	ld bc, HEX_TABLE
	add a, c
	ld c, a
	ld a, (bc)
	ret
	
	.align 16
HEX_TABLE
	.db '0'
	.db '1'
	.db '2'
	.db '3'
	.db '4'
	.db '5'
	.db '6'
	.db '7'
	.db '8'
	.db '9'
	.db 'A'
	.db 'B'
	.db 'C'
	.db 'D'
	.db 'E'
	.db 'F'

#endlocal

; byte_to_decimal
; inputs: de - 4 byte destination buffer, a - number
byte_to_decimal
#local

	push de

	ld (num), a

	ld d, a
	ld e, 10

	call div_d_e
	ld (ones), a

	ld a, (num)
	ld hl, ones
	ld b, (hl)
	sub b
	ld d, a
	ld e, 10
	call div_d_e
	; quotient is in 'd'
	ld e, 10
	call div_d_e
	ld (tens), a

	; HUNDREDS

	ld a, (tens)
	add a
	add a
	add a
	add a
	add a
	add a
	add a
	add a
	add a		; multiply by 10
	ld b, a
	ld a, (ones)
	add b		; add 'ones'
	ld b, a
	ld a, (num)
	sub b		; subtract all that from 'num'
	ld d, a
	ld e, 100
	call div_d_e	; divide by 100
	ld e, 10
	call div_d_e	; modulo 10
	ld (hundreds), a

	pop de

	; STORE RESULTS

	ld a, (hundreds)
	add 48
	ld (de), a

	ld a, (tens)
	add 48
	inc de
	ld (de), a

	ld a, (ones)
	add 48
	inc de
	ld (de), a

	xor a
	inc de
	ld (de), a

	ret
; variables
num
	.ds 1
ones
	.ds 1
tens
	.ds 1
hundreds
	.ds 1
#endlocal
