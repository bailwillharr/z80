; term.z80



; com_led
; Turn on leds until a key is pressed
com_led
	ld a, $88
	out (IO_7SEG), a
	call readc
	xor a
	out (IO_7SEG), a
	ret



; com_sp
; print the contents of the stack pointer
com_sp
#local
	ld hl, 0
	add hl, sp
	ld de, buf_hex_str
	call word_to_hex
	ld hl, buf_hex_str
	call puts
	ld a, CR
	call putc
	ld a, LF
	call putc
	ret
#data DATA
buf_hex_str
	.ds 5
#code CODE
#endlocal



; com_text
; Print some Shakespeare
com_text
#local
	ld hl, STR_SHAKESPEARE
	call puts
	ret
; constants
STR_SHAKESPEARE
	.dm "SCENE I. Rome. A street.",CR,LF
	.dm HT,"Enter FLAVIUS, MARULLUS, and certain Commoners",CR,LF
	.dm "FLAVIUS",CR,LF
	.dm HT,"Hence! home, you idle creatures get you home:",CR,LF
	.dm HT,"Is this a holiday? what! know you not,",CR,LF
	.dm HT,"Being mechanical, you ought not walk",CR,LF
	.dm HT,"Upon a labouring day without the sign",CR,LF
	.dm HT,"Of your profession? Speak, what trade art thou?",CR,LF
	.dm "First Commoner",CR,LF
	.dm HT,"Why, sir, a carpenter.",CR,LF
	.dm "MARULLUS",CR,LF
	.dm HT,"Where is thy leather apron and thy rule?",CR,LF
	.dm HT,"What dost thou with thy best apparel on?",CR,LF
	.dm HT,"You, sir, what trade are you?",CR,LF
	.dm "Second Commoner",CR,LF
	.dm HT,"Truly, sir, in respect of a fine workman, I am but,",CR,LF
	.dm HT,"as you would say, a cobbler.",CR,LF
	.dm "MARULLUS",CR,LF
	.dm HT,"But what trade art thou? answer me directly.",CR,LF
	.dm "Second Commoner",CR,LF
	.dm HT,"A trade, sir, that, I hope, I may use with a safe",CR,LF
	.dm HT,"conscience; which is, indeed, sir, a mender of bad soles.",CR,LF
	.dm "MARULLUS",CR,LF
	.dm HT,"What trade, thou knave? thou naughty knave, what trade?",CR,LF
	.dm "Second Commoner",CR,LF
	.dm HT,"Nay, I beseech you, sir, be not out with me: yet,",CR,LF
	.dm HT,"if you be out, sir, I can mend you.",CR,LF
	.dm "MARULLUS",CR,LF
	.dm HT,"What meanest thou by that? mend me, thou saucy fellow!",CR,LF
	.dm 0
#endlocal



; com_halt
com_halt
#local
	di
halt_loop
	halt
	jr halt_loop
#endlocal



; com_help
com_help
#local
	ld hl, STR_HELP
	call puts
	ei
	call readc
	di
	ret
; constants
STR_HELP
	.dm "Interrupts are now enabled. Press any key to disable them.",CR,LF,0
#endlocal



; com_slow
com_slow
#local
	ld a, $01
	out (IO_CLK), a
	ret
#endlocal



; com_fast
com_fast
#local
	ld a, $02
	out (IO_CLK), a

	ld a, 169
	ld de, buf
	call byte_to_decimal
	ld hl, buf
	call puts

	ret
buf
	.ds 4
#endlocal



; com_primes
com_primes
#local
	ld b, 2
loop:
	xor a
	cp b
	jr z, loop_end

	ld a, 1
	ld (isPrime), a

	ld c, 2
loop2:
	ld a, b
	dec a
	cp c
	jr c, loop2_end

	; loop 2 body

	push bc
	push de
	push hl

	ld de, bc
	call div_d_e

	pop hl
	pop de
	pop bc

	or a
	jr nz, maybe_prime
	xor a
	ld (isPrime), a
	jr loop2_end
maybe_prime:

	; loop 2 body end

	inc c
	jr loop2

loop2_end:

	ld a, (isPrime)
	cp 1
	jr nz, not_prime

	push de
	push bc
	push hl
	ld de, print_buffer
	ld a, b
	call byte_to_decimal
	ld hl, print_buffer
	call puts
	ld a, CR
	call putc
	ld a, LF
	call putc
	pop hl
	pop bc
	pop de

not_prime:

	inc b
	jr loop
loop_end:
	ret

; variables
#data DATA
print_buffer
	.ds 4
isPrime
	.ds 1
#code CODE
#endlocal



; com_primes16
com_primes16
#local
	ld bc, 2
loop:
	ld a, b
	or c
	jr z, loop_end

	ld a, 1
	ld (isPrime), a

	ld de, 2
loop2:
	ld hl, bc
	push bc
	push de
	call cmpgte
	pop de
	pop bc
	jr c, loop2_end

	; loop 2 body

	push bc
	push de

	ld a, b
	; bc -> ac
	; de -> de
	call div_ac_de

	pop de
	pop bc

	ld a, h
	or l
	jr nz, maybe_prime
	xor a
	ld (isPrime), a
	jr loop2_end
maybe_prime:

	; loop 2 body end

	inc de
	jr loop2

loop2_end:

	ld a, (isPrime)
	cp 1
	jr nz, not_prime

	push de
	push bc
	push hl

;	ld de, print_buffer
;	ld a, b
;	call byte_to_decimal
;	ld hl, print_buffer
;	call puts
;	ld a, CR
;	call putc
;	ld a, LF
;	call putc

	pop hl
	pop bc
	pop de

not_prime:

	inc bc
	jr loop
loop_end:
	ret

; variables
#data DATA
print_buffer
	.ds 4
isPrime
	.ds 1
#code CODE
#endlocal



; com_hibaud
com_hibaud:
#local

	ld hl, str_hibaud
	call puts

	ld a, %10000011			; 8N1, enable DLAB
	out (IO_UART_LCR), a

	xor a					; MSB = 0
	out (IO_UART_DLM), a
	inc a					; LSB = 1
	out (IO_UART_DLL), a	; 16,000,000 / (16 * 1) = 1,000,000 Bd

	ld a, %00000011			; keep 8N1, enable DLAB
	out (IO_UART_LCR), a

enter_loop:
	call readc
	cp CR
	jr nz, enter_loop

	ld a, CR
	call putc
	ld a, LF
	call putc

	ret

; constants
str_hibaud
	.dm "Line speed changed to 1,000,000 Bd. Reconnect and press enter to continue...",0
#endlocal
