; main.z80

; max size $7000, keep as small as possible
CODE_SIZE	equ $800

#target ram
#code CODE, $8000, CODE_SIZE
#data DATA, $1000, $7000
#data STCK, $F000, $1000

; equates
#include "constants.z80"
#include "romcalls.z80"

#code CODE
start
	ld sp, STCK_end & $FFFF

; random setup

	im 1
	ld hl, int_code
	ld de, INT1
	ld bc, int_code_end - int_code
	ldir
	jr int_code_end



int_code
	.phase INT1
	ld hl, int_str
	call puts
	ei
	ret
int_str
	.dm "INT",CR,LF,0
	.dephase
int_code_end



; interactive shell
	call clear
cmdloop
	ld hl, prompt_str
	call puts

	; clear command buffer
	ld hl, cmd_buf
	ld b, cmd_buf_len
1$	ld (hl), 0
	inc hl
	dec b
	jr nz, 1$

	ld hl, cmd_buf	; read input into buffer
	ld d, cmd_buf_len
	call scanln
	ld hl, cmd_buf
	call cmdparse	; parse and run the corresponding cmd

	jr cmdloop

; other code and data
#include "term.z80"
#include "string.z80"
#include "conv.z80"
#include "shell.z80"
#include "commands.z80"
#include "math.z80"

; constants
prompt_str
	dm "> ",0

#data DATA
cmd_buf
	ds 16
cmd_buf_len	equ $ - cmd_buf
