; term.z80

; scanln
; inputs: hl - pointer to buffer, d - buffer length
; Read characters from the terminal into a buffer until enter is received.
; The enter key (CR) is not saved.
scanln
#local
	ld b, 0			; keep track of index into buffer
loop
	in a, (IO_UART_LSR)	; line status register
	and %00000001		; bitmask for data ready
	jr z, loop		; loop until char received

	in a, (IO_UART_RBR)	; read from receive buffer
	or a			; set/reset z flag
	jr z, loop		; ignore 0

	out (IO_7SEG), a	; DEBUG display code on 7 seg

	cp DEL			; exception for backspace key
	jr nz, no_backspace

	ld a, b			; backspace stuff:
	or a
	jr z, loop
	dec hl
	ld (hl), 0
	dec b
	push hl
	ld hl, STR_BACK
	call puts
	pop hl
	jr loop

no_backspace

	cp CR
	jr z, enter_received

	; make sure its a typeable char ($20-$7E)
	cp $20
	jp m, loop

	ld e, a		; register shuffling to preserve a
	ld a, b
	cp d
	ld a, e
	jr z, loop

	call putc		; echo user's input

	inc b
	ld (hl), a		; load char into buffer
	inc hl
	jr loop
enter_received
	call putc
	ld a, LF
	call putc
	ret
; constants
STR_BACK
	.dm BS," ",BS,0
#endlocal

; clear
; clear the screen and set cursor position to 1,1
clear
#local
	ld hl, STR_CLR
	call puts
	ret
STR_CLR
	.dm ESC,"[2J",ESC,"[1;1H",0
#endlocal

; newline
; writes CR and LF
newline
#local
	ld hl, STR_CLR
	call puts
	ret
STR_CLR
	.dm ESC,"[2J",ESC,"[1;1H",0
#endlocal

; readc
; read a character from the terminal
; no inputs
; a - byte received
readc
#local
1$
	in a, (IO_UART_LSR)
	and %00000001
	jr z, 1$
	in a, (IO_UART_RBR)
	ret
#endlocal

; putc
; write a character to the terminal
; a - char to write
putc
#local
	ld c, a
1$
	in a, (IO_UART_LSR)
	and %01000000
	jr z, 1$
	ld a, c
	out (IO_UART_THR), a
	ret
#endlocal

; puts
; print a string to the terminal
; hl - ptr to string terminated with a zero
puts
#local
1$
	ld a, (hl)
	inc hl
	or a
	ret z
	call putc
	jr 1$
#endlocal
